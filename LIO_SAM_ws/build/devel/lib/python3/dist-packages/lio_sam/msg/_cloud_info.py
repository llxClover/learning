# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lio_sam/cloud_info.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import sensor_msgs.msg
import std_msgs.msg

class cloud_info(genpy.Message):
  _md5sum = "7490d670e17d4a2b9ad7d689d0925e1a"
  _type = "lio_sam/cloud_info"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# Cloud Info
Header header

int32[] start_ring_index
int32[] end_ring_index

int32[] point_column_index  # point column index in range image
int32[] point_range  # point range 

int64 imu_available
int64 odom_available

# Attitude for LOAM initialization
float32 imu_roll_init
float32 imu_pitch_init
float32 imu_yaw_init

# Initial guess from imu pre-integration
float32 init_guess_x
float32 init_guess_y
float32 init_guess_z
float32 init_guess_roll
float32 init_guess_pitch
float32 init_guess_yaw

# Point cloud messages
sensor_msgs/PointCloud2 cloud_deskewed 
sensor_msgs/PointCloud2 cloud_corner
sensor_msgs/PointCloud2 cloud_surface

# 3rd party messages
sensor_msgs/PointCloud2 keyframe_cloud
sensor_msgs/PointCloud2 keyframe_color
sensor_msgs/PointCloud2 keyframe_poses
sensor_msgs/PointCloud2 keyframe_map
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: sensor_msgs/PointCloud2
# This message holds a collection of N-dimensional points, which may
# contain additional information such as normals, intensity, etc. The
# point data is stored as a binary blob, its layout described by the
# contents of the "fields" array.

# The point cloud data may be organized 2d (image-like) or 1d
# (unordered). Point clouds organized as 2d images may be produced by
# camera depth sensors such as stereo or time-of-flight.

# Time of sensor data acquisition, and the coordinate frame ID (for 3d
# points).
Header header

# 2D structure of the point cloud. If the cloud is unordered, height is
# 1 and width is the length of the point cloud.
uint32 height
uint32 width

# Describes the channels and their layout in the binary data blob.
PointField[] fields

bool    is_bigendian # Is this data bigendian?
uint32  point_step   # Length of a point in bytes
uint32  row_step     # Length of a row in bytes
uint8[] data         # Actual point data, size is (row_step*height)

bool is_dense        # True if there are no invalid points

================================================================================
MSG: sensor_msgs/PointField
# This message holds the description of one point entry in the
# PointCloud2 message format.
uint8 INT8    = 1
uint8 UINT8   = 2
uint8 INT16   = 3
uint8 UINT16  = 4
uint8 INT32   = 5
uint8 UINT32  = 6
uint8 FLOAT32 = 7
uint8 FLOAT64 = 8

string name      # Name of field
uint32 offset    # Offset from start of point struct
uint8  datatype  # Datatype enumeration, see above
uint32 count     # How many elements in the field
"""
  __slots__ = ['header','start_ring_index','end_ring_index','point_column_index','point_range','imu_available','odom_available','imu_roll_init','imu_pitch_init','imu_yaw_init','init_guess_x','init_guess_y','init_guess_z','init_guess_roll','init_guess_pitch','init_guess_yaw','cloud_deskewed','cloud_corner','cloud_surface','keyframe_cloud','keyframe_color','keyframe_poses','keyframe_map']
  _slot_types = ['std_msgs/Header','int32[]','int32[]','int32[]','int32[]','int64','int64','float32','float32','float32','float32','float32','float32','float32','float32','float32','sensor_msgs/PointCloud2','sensor_msgs/PointCloud2','sensor_msgs/PointCloud2','sensor_msgs/PointCloud2','sensor_msgs/PointCloud2','sensor_msgs/PointCloud2','sensor_msgs/PointCloud2']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,start_ring_index,end_ring_index,point_column_index,point_range,imu_available,odom_available,imu_roll_init,imu_pitch_init,imu_yaw_init,init_guess_x,init_guess_y,init_guess_z,init_guess_roll,init_guess_pitch,init_guess_yaw,cloud_deskewed,cloud_corner,cloud_surface,keyframe_cloud,keyframe_color,keyframe_poses,keyframe_map

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(cloud_info, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.start_ring_index is None:
        self.start_ring_index = []
      if self.end_ring_index is None:
        self.end_ring_index = []
      if self.point_column_index is None:
        self.point_column_index = []
      if self.point_range is None:
        self.point_range = []
      if self.imu_available is None:
        self.imu_available = 0
      if self.odom_available is None:
        self.odom_available = 0
      if self.imu_roll_init is None:
        self.imu_roll_init = 0.
      if self.imu_pitch_init is None:
        self.imu_pitch_init = 0.
      if self.imu_yaw_init is None:
        self.imu_yaw_init = 0.
      if self.init_guess_x is None:
        self.init_guess_x = 0.
      if self.init_guess_y is None:
        self.init_guess_y = 0.
      if self.init_guess_z is None:
        self.init_guess_z = 0.
      if self.init_guess_roll is None:
        self.init_guess_roll = 0.
      if self.init_guess_pitch is None:
        self.init_guess_pitch = 0.
      if self.init_guess_yaw is None:
        self.init_guess_yaw = 0.
      if self.cloud_deskewed is None:
        self.cloud_deskewed = sensor_msgs.msg.PointCloud2()
      if self.cloud_corner is None:
        self.cloud_corner = sensor_msgs.msg.PointCloud2()
      if self.cloud_surface is None:
        self.cloud_surface = sensor_msgs.msg.PointCloud2()
      if self.keyframe_cloud is None:
        self.keyframe_cloud = sensor_msgs.msg.PointCloud2()
      if self.keyframe_color is None:
        self.keyframe_color = sensor_msgs.msg.PointCloud2()
      if self.keyframe_poses is None:
        self.keyframe_poses = sensor_msgs.msg.PointCloud2()
      if self.keyframe_map is None:
        self.keyframe_map = sensor_msgs.msg.PointCloud2()
    else:
      self.header = std_msgs.msg.Header()
      self.start_ring_index = []
      self.end_ring_index = []
      self.point_column_index = []
      self.point_range = []
      self.imu_available = 0
      self.odom_available = 0
      self.imu_roll_init = 0.
      self.imu_pitch_init = 0.
      self.imu_yaw_init = 0.
      self.init_guess_x = 0.
      self.init_guess_y = 0.
      self.init_guess_z = 0.
      self.init_guess_roll = 0.
      self.init_guess_pitch = 0.
      self.init_guess_yaw = 0.
      self.cloud_deskewed = sensor_msgs.msg.PointCloud2()
      self.cloud_corner = sensor_msgs.msg.PointCloud2()
      self.cloud_surface = sensor_msgs.msg.PointCloud2()
      self.keyframe_cloud = sensor_msgs.msg.PointCloud2()
      self.keyframe_color = sensor_msgs.msg.PointCloud2()
      self.keyframe_poses = sensor_msgs.msg.PointCloud2()
      self.keyframe_map = sensor_msgs.msg.PointCloud2()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.start_ring_index)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.start_ring_index))
      length = len(self.end_ring_index)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.end_ring_index))
      length = len(self.point_column_index)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.point_column_index))
      length = len(self.point_range)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.point_range))
      _x = self
      buff.write(_get_struct_2q9f3I().pack(_x.imu_available, _x.odom_available, _x.imu_roll_init, _x.imu_pitch_init, _x.imu_yaw_init, _x.init_guess_x, _x.init_guess_y, _x.init_guess_z, _x.init_guess_roll, _x.init_guess_pitch, _x.init_guess_yaw, _x.cloud_deskewed.header.seq, _x.cloud_deskewed.header.stamp.secs, _x.cloud_deskewed.header.stamp.nsecs))
      _x = self.cloud_deskewed.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.cloud_deskewed.height, _x.cloud_deskewed.width))
      length = len(self.cloud_deskewed.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.cloud_deskewed.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.cloud_deskewed.is_bigendian, _x.cloud_deskewed.point_step, _x.cloud_deskewed.row_step))
      _x = self.cloud_deskewed.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.cloud_deskewed.is_dense, _x.cloud_corner.header.seq, _x.cloud_corner.header.stamp.secs, _x.cloud_corner.header.stamp.nsecs))
      _x = self.cloud_corner.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.cloud_corner.height, _x.cloud_corner.width))
      length = len(self.cloud_corner.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.cloud_corner.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.cloud_corner.is_bigendian, _x.cloud_corner.point_step, _x.cloud_corner.row_step))
      _x = self.cloud_corner.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.cloud_corner.is_dense, _x.cloud_surface.header.seq, _x.cloud_surface.header.stamp.secs, _x.cloud_surface.header.stamp.nsecs))
      _x = self.cloud_surface.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.cloud_surface.height, _x.cloud_surface.width))
      length = len(self.cloud_surface.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.cloud_surface.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.cloud_surface.is_bigendian, _x.cloud_surface.point_step, _x.cloud_surface.row_step))
      _x = self.cloud_surface.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.cloud_surface.is_dense, _x.keyframe_cloud.header.seq, _x.keyframe_cloud.header.stamp.secs, _x.keyframe_cloud.header.stamp.nsecs))
      _x = self.keyframe_cloud.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.keyframe_cloud.height, _x.keyframe_cloud.width))
      length = len(self.keyframe_cloud.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.keyframe_cloud.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.keyframe_cloud.is_bigendian, _x.keyframe_cloud.point_step, _x.keyframe_cloud.row_step))
      _x = self.keyframe_cloud.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.keyframe_cloud.is_dense, _x.keyframe_color.header.seq, _x.keyframe_color.header.stamp.secs, _x.keyframe_color.header.stamp.nsecs))
      _x = self.keyframe_color.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.keyframe_color.height, _x.keyframe_color.width))
      length = len(self.keyframe_color.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.keyframe_color.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.keyframe_color.is_bigendian, _x.keyframe_color.point_step, _x.keyframe_color.row_step))
      _x = self.keyframe_color.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.keyframe_color.is_dense, _x.keyframe_poses.header.seq, _x.keyframe_poses.header.stamp.secs, _x.keyframe_poses.header.stamp.nsecs))
      _x = self.keyframe_poses.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.keyframe_poses.height, _x.keyframe_poses.width))
      length = len(self.keyframe_poses.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.keyframe_poses.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.keyframe_poses.is_bigendian, _x.keyframe_poses.point_step, _x.keyframe_poses.row_step))
      _x = self.keyframe_poses.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.keyframe_poses.is_dense, _x.keyframe_map.header.seq, _x.keyframe_map.header.stamp.secs, _x.keyframe_map.header.stamp.nsecs))
      _x = self.keyframe_map.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.keyframe_map.height, _x.keyframe_map.width))
      length = len(self.keyframe_map.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.keyframe_map.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.keyframe_map.is_bigendian, _x.keyframe_map.point_step, _x.keyframe_map.row_step))
      _x = self.keyframe_map.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.keyframe_map.is_dense
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.cloud_deskewed is None:
        self.cloud_deskewed = sensor_msgs.msg.PointCloud2()
      if self.cloud_corner is None:
        self.cloud_corner = sensor_msgs.msg.PointCloud2()
      if self.cloud_surface is None:
        self.cloud_surface = sensor_msgs.msg.PointCloud2()
      if self.keyframe_cloud is None:
        self.keyframe_cloud = sensor_msgs.msg.PointCloud2()
      if self.keyframe_color is None:
        self.keyframe_color = sensor_msgs.msg.PointCloud2()
      if self.keyframe_poses is None:
        self.keyframe_poses = sensor_msgs.msg.PointCloud2()
      if self.keyframe_map is None:
        self.keyframe_map = sensor_msgs.msg.PointCloud2()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.start_ring_index = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.end_ring_index = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.point_column_index = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.point_range = s.unpack(str[start:end])
      _x = self
      start = end
      end += 64
      (_x.imu_available, _x.odom_available, _x.imu_roll_init, _x.imu_pitch_init, _x.imu_yaw_init, _x.init_guess_x, _x.init_guess_y, _x.init_guess_z, _x.init_guess_roll, _x.init_guess_pitch, _x.init_guess_yaw, _x.cloud_deskewed.header.seq, _x.cloud_deskewed.header.stamp.secs, _x.cloud_deskewed.header.stamp.nsecs,) = _get_struct_2q9f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cloud_deskewed.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.cloud_deskewed.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.cloud_deskewed.height, _x.cloud_deskewed.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cloud_deskewed.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.cloud_deskewed.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.cloud_deskewed.is_bigendian, _x.cloud_deskewed.point_step, _x.cloud_deskewed.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.cloud_deskewed.is_bigendian = bool(self.cloud_deskewed.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.cloud_deskewed.data = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.cloud_deskewed.is_dense, _x.cloud_corner.header.seq, _x.cloud_corner.header.stamp.secs, _x.cloud_corner.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.cloud_deskewed.is_dense = bool(self.cloud_deskewed.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cloud_corner.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.cloud_corner.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.cloud_corner.height, _x.cloud_corner.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cloud_corner.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.cloud_corner.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.cloud_corner.is_bigendian, _x.cloud_corner.point_step, _x.cloud_corner.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.cloud_corner.is_bigendian = bool(self.cloud_corner.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.cloud_corner.data = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.cloud_corner.is_dense, _x.cloud_surface.header.seq, _x.cloud_surface.header.stamp.secs, _x.cloud_surface.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.cloud_corner.is_dense = bool(self.cloud_corner.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cloud_surface.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.cloud_surface.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.cloud_surface.height, _x.cloud_surface.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cloud_surface.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.cloud_surface.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.cloud_surface.is_bigendian, _x.cloud_surface.point_step, _x.cloud_surface.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.cloud_surface.is_bigendian = bool(self.cloud_surface.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.cloud_surface.data = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.cloud_surface.is_dense, _x.keyframe_cloud.header.seq, _x.keyframe_cloud.header.stamp.secs, _x.keyframe_cloud.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.cloud_surface.is_dense = bool(self.cloud_surface.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.keyframe_cloud.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.keyframe_cloud.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.keyframe_cloud.height, _x.keyframe_cloud.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.keyframe_cloud.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.keyframe_cloud.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.keyframe_cloud.is_bigendian, _x.keyframe_cloud.point_step, _x.keyframe_cloud.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.keyframe_cloud.is_bigendian = bool(self.keyframe_cloud.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.keyframe_cloud.data = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.keyframe_cloud.is_dense, _x.keyframe_color.header.seq, _x.keyframe_color.header.stamp.secs, _x.keyframe_color.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.keyframe_cloud.is_dense = bool(self.keyframe_cloud.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.keyframe_color.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.keyframe_color.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.keyframe_color.height, _x.keyframe_color.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.keyframe_color.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.keyframe_color.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.keyframe_color.is_bigendian, _x.keyframe_color.point_step, _x.keyframe_color.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.keyframe_color.is_bigendian = bool(self.keyframe_color.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.keyframe_color.data = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.keyframe_color.is_dense, _x.keyframe_poses.header.seq, _x.keyframe_poses.header.stamp.secs, _x.keyframe_poses.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.keyframe_color.is_dense = bool(self.keyframe_color.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.keyframe_poses.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.keyframe_poses.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.keyframe_poses.height, _x.keyframe_poses.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.keyframe_poses.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.keyframe_poses.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.keyframe_poses.is_bigendian, _x.keyframe_poses.point_step, _x.keyframe_poses.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.keyframe_poses.is_bigendian = bool(self.keyframe_poses.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.keyframe_poses.data = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.keyframe_poses.is_dense, _x.keyframe_map.header.seq, _x.keyframe_map.header.stamp.secs, _x.keyframe_map.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.keyframe_poses.is_dense = bool(self.keyframe_poses.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.keyframe_map.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.keyframe_map.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.keyframe_map.height, _x.keyframe_map.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.keyframe_map.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.keyframe_map.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.keyframe_map.is_bigendian, _x.keyframe_map.point_step, _x.keyframe_map.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.keyframe_map.is_bigendian = bool(self.keyframe_map.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.keyframe_map.data = str[start:end]
      start = end
      end += 1
      (self.keyframe_map.is_dense,) = _get_struct_B().unpack(str[start:end])
      self.keyframe_map.is_dense = bool(self.keyframe_map.is_dense)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.start_ring_index)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.start_ring_index.tostring())
      length = len(self.end_ring_index)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.end_ring_index.tostring())
      length = len(self.point_column_index)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.point_column_index.tostring())
      length = len(self.point_range)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.point_range.tostring())
      _x = self
      buff.write(_get_struct_2q9f3I().pack(_x.imu_available, _x.odom_available, _x.imu_roll_init, _x.imu_pitch_init, _x.imu_yaw_init, _x.init_guess_x, _x.init_guess_y, _x.init_guess_z, _x.init_guess_roll, _x.init_guess_pitch, _x.init_guess_yaw, _x.cloud_deskewed.header.seq, _x.cloud_deskewed.header.stamp.secs, _x.cloud_deskewed.header.stamp.nsecs))
      _x = self.cloud_deskewed.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.cloud_deskewed.height, _x.cloud_deskewed.width))
      length = len(self.cloud_deskewed.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.cloud_deskewed.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.cloud_deskewed.is_bigendian, _x.cloud_deskewed.point_step, _x.cloud_deskewed.row_step))
      _x = self.cloud_deskewed.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.cloud_deskewed.is_dense, _x.cloud_corner.header.seq, _x.cloud_corner.header.stamp.secs, _x.cloud_corner.header.stamp.nsecs))
      _x = self.cloud_corner.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.cloud_corner.height, _x.cloud_corner.width))
      length = len(self.cloud_corner.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.cloud_corner.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.cloud_corner.is_bigendian, _x.cloud_corner.point_step, _x.cloud_corner.row_step))
      _x = self.cloud_corner.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.cloud_corner.is_dense, _x.cloud_surface.header.seq, _x.cloud_surface.header.stamp.secs, _x.cloud_surface.header.stamp.nsecs))
      _x = self.cloud_surface.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.cloud_surface.height, _x.cloud_surface.width))
      length = len(self.cloud_surface.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.cloud_surface.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.cloud_surface.is_bigendian, _x.cloud_surface.point_step, _x.cloud_surface.row_step))
      _x = self.cloud_surface.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.cloud_surface.is_dense, _x.keyframe_cloud.header.seq, _x.keyframe_cloud.header.stamp.secs, _x.keyframe_cloud.header.stamp.nsecs))
      _x = self.keyframe_cloud.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.keyframe_cloud.height, _x.keyframe_cloud.width))
      length = len(self.keyframe_cloud.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.keyframe_cloud.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.keyframe_cloud.is_bigendian, _x.keyframe_cloud.point_step, _x.keyframe_cloud.row_step))
      _x = self.keyframe_cloud.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.keyframe_cloud.is_dense, _x.keyframe_color.header.seq, _x.keyframe_color.header.stamp.secs, _x.keyframe_color.header.stamp.nsecs))
      _x = self.keyframe_color.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.keyframe_color.height, _x.keyframe_color.width))
      length = len(self.keyframe_color.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.keyframe_color.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.keyframe_color.is_bigendian, _x.keyframe_color.point_step, _x.keyframe_color.row_step))
      _x = self.keyframe_color.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.keyframe_color.is_dense, _x.keyframe_poses.header.seq, _x.keyframe_poses.header.stamp.secs, _x.keyframe_poses.header.stamp.nsecs))
      _x = self.keyframe_poses.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.keyframe_poses.height, _x.keyframe_poses.width))
      length = len(self.keyframe_poses.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.keyframe_poses.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.keyframe_poses.is_bigendian, _x.keyframe_poses.point_step, _x.keyframe_poses.row_step))
      _x = self.keyframe_poses.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.keyframe_poses.is_dense, _x.keyframe_map.header.seq, _x.keyframe_map.header.stamp.secs, _x.keyframe_map.header.stamp.nsecs))
      _x = self.keyframe_map.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.keyframe_map.height, _x.keyframe_map.width))
      length = len(self.keyframe_map.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.keyframe_map.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.keyframe_map.is_bigendian, _x.keyframe_map.point_step, _x.keyframe_map.row_step))
      _x = self.keyframe_map.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.keyframe_map.is_dense
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.cloud_deskewed is None:
        self.cloud_deskewed = sensor_msgs.msg.PointCloud2()
      if self.cloud_corner is None:
        self.cloud_corner = sensor_msgs.msg.PointCloud2()
      if self.cloud_surface is None:
        self.cloud_surface = sensor_msgs.msg.PointCloud2()
      if self.keyframe_cloud is None:
        self.keyframe_cloud = sensor_msgs.msg.PointCloud2()
      if self.keyframe_color is None:
        self.keyframe_color = sensor_msgs.msg.PointCloud2()
      if self.keyframe_poses is None:
        self.keyframe_poses = sensor_msgs.msg.PointCloud2()
      if self.keyframe_map is None:
        self.keyframe_map = sensor_msgs.msg.PointCloud2()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.start_ring_index = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.end_ring_index = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.point_column_index = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.point_range = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 64
      (_x.imu_available, _x.odom_available, _x.imu_roll_init, _x.imu_pitch_init, _x.imu_yaw_init, _x.init_guess_x, _x.init_guess_y, _x.init_guess_z, _x.init_guess_roll, _x.init_guess_pitch, _x.init_guess_yaw, _x.cloud_deskewed.header.seq, _x.cloud_deskewed.header.stamp.secs, _x.cloud_deskewed.header.stamp.nsecs,) = _get_struct_2q9f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cloud_deskewed.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.cloud_deskewed.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.cloud_deskewed.height, _x.cloud_deskewed.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cloud_deskewed.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.cloud_deskewed.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.cloud_deskewed.is_bigendian, _x.cloud_deskewed.point_step, _x.cloud_deskewed.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.cloud_deskewed.is_bigendian = bool(self.cloud_deskewed.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.cloud_deskewed.data = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.cloud_deskewed.is_dense, _x.cloud_corner.header.seq, _x.cloud_corner.header.stamp.secs, _x.cloud_corner.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.cloud_deskewed.is_dense = bool(self.cloud_deskewed.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cloud_corner.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.cloud_corner.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.cloud_corner.height, _x.cloud_corner.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cloud_corner.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.cloud_corner.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.cloud_corner.is_bigendian, _x.cloud_corner.point_step, _x.cloud_corner.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.cloud_corner.is_bigendian = bool(self.cloud_corner.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.cloud_corner.data = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.cloud_corner.is_dense, _x.cloud_surface.header.seq, _x.cloud_surface.header.stamp.secs, _x.cloud_surface.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.cloud_corner.is_dense = bool(self.cloud_corner.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cloud_surface.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.cloud_surface.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.cloud_surface.height, _x.cloud_surface.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cloud_surface.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.cloud_surface.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.cloud_surface.is_bigendian, _x.cloud_surface.point_step, _x.cloud_surface.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.cloud_surface.is_bigendian = bool(self.cloud_surface.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.cloud_surface.data = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.cloud_surface.is_dense, _x.keyframe_cloud.header.seq, _x.keyframe_cloud.header.stamp.secs, _x.keyframe_cloud.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.cloud_surface.is_dense = bool(self.cloud_surface.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.keyframe_cloud.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.keyframe_cloud.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.keyframe_cloud.height, _x.keyframe_cloud.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.keyframe_cloud.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.keyframe_cloud.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.keyframe_cloud.is_bigendian, _x.keyframe_cloud.point_step, _x.keyframe_cloud.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.keyframe_cloud.is_bigendian = bool(self.keyframe_cloud.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.keyframe_cloud.data = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.keyframe_cloud.is_dense, _x.keyframe_color.header.seq, _x.keyframe_color.header.stamp.secs, _x.keyframe_color.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.keyframe_cloud.is_dense = bool(self.keyframe_cloud.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.keyframe_color.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.keyframe_color.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.keyframe_color.height, _x.keyframe_color.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.keyframe_color.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.keyframe_color.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.keyframe_color.is_bigendian, _x.keyframe_color.point_step, _x.keyframe_color.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.keyframe_color.is_bigendian = bool(self.keyframe_color.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.keyframe_color.data = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.keyframe_color.is_dense, _x.keyframe_poses.header.seq, _x.keyframe_poses.header.stamp.secs, _x.keyframe_poses.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.keyframe_color.is_dense = bool(self.keyframe_color.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.keyframe_poses.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.keyframe_poses.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.keyframe_poses.height, _x.keyframe_poses.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.keyframe_poses.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.keyframe_poses.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.keyframe_poses.is_bigendian, _x.keyframe_poses.point_step, _x.keyframe_poses.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.keyframe_poses.is_bigendian = bool(self.keyframe_poses.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.keyframe_poses.data = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.keyframe_poses.is_dense, _x.keyframe_map.header.seq, _x.keyframe_map.header.stamp.secs, _x.keyframe_map.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.keyframe_poses.is_dense = bool(self.keyframe_poses.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.keyframe_map.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.keyframe_map.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.keyframe_map.height, _x.keyframe_map.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.keyframe_map.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.keyframe_map.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.keyframe_map.is_bigendian, _x.keyframe_map.point_step, _x.keyframe_map.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.keyframe_map.is_bigendian = bool(self.keyframe_map.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.keyframe_map.data = str[start:end]
      start = end
      end += 1
      (self.keyframe_map.is_dense,) = _get_struct_B().unpack(str[start:end])
      self.keyframe_map.is_dense = bool(self.keyframe_map.is_dense)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2q9f3I = None
def _get_struct_2q9f3I():
    global _struct_2q9f3I
    if _struct_2q9f3I is None:
        _struct_2q9f3I = struct.Struct("<2q9f3I")
    return _struct_2q9f3I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_B2I = None
def _get_struct_B2I():
    global _struct_B2I
    if _struct_B2I is None:
        _struct_B2I = struct.Struct("<B2I")
    return _struct_B2I
_struct_B3I = None
def _get_struct_B3I():
    global _struct_B3I
    if _struct_B3I is None:
        _struct_B3I = struct.Struct("<B3I")
    return _struct_B3I
_struct_IBI = None
def _get_struct_IBI():
    global _struct_IBI
    if _struct_IBI is None:
        _struct_IBI = struct.Struct("<IBI")
    return _struct_IBI
