// Generated by gencpp from file lio_sam/cloud_info.msg
// DO NOT EDIT!


#ifndef LIO_SAM_MESSAGE_CLOUD_INFO_H
#define LIO_SAM_MESSAGE_CLOUD_INFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <sensor_msgs/PointCloud2.h>
#include <sensor_msgs/PointCloud2.h>
#include <sensor_msgs/PointCloud2.h>
#include <sensor_msgs/PointCloud2.h>
#include <sensor_msgs/PointCloud2.h>
#include <sensor_msgs/PointCloud2.h>
#include <sensor_msgs/PointCloud2.h>

namespace lio_sam
{
template <class ContainerAllocator>
struct cloud_info_
{
  typedef cloud_info_<ContainerAllocator> Type;

  cloud_info_()
    : header()
    , start_ring_index()
    , end_ring_index()
    , point_column_index()
    , point_range()
    , imu_available(0)
    , odom_available(0)
    , imu_roll_init(0.0)
    , imu_pitch_init(0.0)
    , imu_yaw_init(0.0)
    , init_guess_x(0.0)
    , init_guess_y(0.0)
    , init_guess_z(0.0)
    , init_guess_roll(0.0)
    , init_guess_pitch(0.0)
    , init_guess_yaw(0.0)
    , cloud_deskewed()
    , cloud_corner()
    , cloud_surface()
    , keyframe_cloud()
    , keyframe_color()
    , keyframe_poses()
    , keyframe_map()  {
    }
  cloud_info_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , start_ring_index(_alloc)
    , end_ring_index(_alloc)
    , point_column_index(_alloc)
    , point_range(_alloc)
    , imu_available(0)
    , odom_available(0)
    , imu_roll_init(0.0)
    , imu_pitch_init(0.0)
    , imu_yaw_init(0.0)
    , init_guess_x(0.0)
    , init_guess_y(0.0)
    , init_guess_z(0.0)
    , init_guess_roll(0.0)
    , init_guess_pitch(0.0)
    , init_guess_yaw(0.0)
    , cloud_deskewed(_alloc)
    , cloud_corner(_alloc)
    , cloud_surface(_alloc)
    , keyframe_cloud(_alloc)
    , keyframe_color(_alloc)
    , keyframe_poses(_alloc)
    , keyframe_map(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _start_ring_index_type;
  _start_ring_index_type start_ring_index;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _end_ring_index_type;
  _end_ring_index_type end_ring_index;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _point_column_index_type;
  _point_column_index_type point_column_index;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _point_range_type;
  _point_range_type point_range;

   typedef int64_t _imu_available_type;
  _imu_available_type imu_available;

   typedef int64_t _odom_available_type;
  _odom_available_type odom_available;

   typedef float _imu_roll_init_type;
  _imu_roll_init_type imu_roll_init;

   typedef float _imu_pitch_init_type;
  _imu_pitch_init_type imu_pitch_init;

   typedef float _imu_yaw_init_type;
  _imu_yaw_init_type imu_yaw_init;

   typedef float _init_guess_x_type;
  _init_guess_x_type init_guess_x;

   typedef float _init_guess_y_type;
  _init_guess_y_type init_guess_y;

   typedef float _init_guess_z_type;
  _init_guess_z_type init_guess_z;

   typedef float _init_guess_roll_type;
  _init_guess_roll_type init_guess_roll;

   typedef float _init_guess_pitch_type;
  _init_guess_pitch_type init_guess_pitch;

   typedef float _init_guess_yaw_type;
  _init_guess_yaw_type init_guess_yaw;

   typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _cloud_deskewed_type;
  _cloud_deskewed_type cloud_deskewed;

   typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _cloud_corner_type;
  _cloud_corner_type cloud_corner;

   typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _cloud_surface_type;
  _cloud_surface_type cloud_surface;

   typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _keyframe_cloud_type;
  _keyframe_cloud_type keyframe_cloud;

   typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _keyframe_color_type;
  _keyframe_color_type keyframe_color;

   typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _keyframe_poses_type;
  _keyframe_poses_type keyframe_poses;

   typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _keyframe_map_type;
  _keyframe_map_type keyframe_map;





  typedef boost::shared_ptr< ::lio_sam::cloud_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lio_sam::cloud_info_<ContainerAllocator> const> ConstPtr;

}; // struct cloud_info_

typedef ::lio_sam::cloud_info_<std::allocator<void> > cloud_info;

typedef boost::shared_ptr< ::lio_sam::cloud_info > cloud_infoPtr;
typedef boost::shared_ptr< ::lio_sam::cloud_info const> cloud_infoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lio_sam::cloud_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lio_sam::cloud_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lio_sam::cloud_info_<ContainerAllocator1> & lhs, const ::lio_sam::cloud_info_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.start_ring_index == rhs.start_ring_index &&
    lhs.end_ring_index == rhs.end_ring_index &&
    lhs.point_column_index == rhs.point_column_index &&
    lhs.point_range == rhs.point_range &&
    lhs.imu_available == rhs.imu_available &&
    lhs.odom_available == rhs.odom_available &&
    lhs.imu_roll_init == rhs.imu_roll_init &&
    lhs.imu_pitch_init == rhs.imu_pitch_init &&
    lhs.imu_yaw_init == rhs.imu_yaw_init &&
    lhs.init_guess_x == rhs.init_guess_x &&
    lhs.init_guess_y == rhs.init_guess_y &&
    lhs.init_guess_z == rhs.init_guess_z &&
    lhs.init_guess_roll == rhs.init_guess_roll &&
    lhs.init_guess_pitch == rhs.init_guess_pitch &&
    lhs.init_guess_yaw == rhs.init_guess_yaw &&
    lhs.cloud_deskewed == rhs.cloud_deskewed &&
    lhs.cloud_corner == rhs.cloud_corner &&
    lhs.cloud_surface == rhs.cloud_surface &&
    lhs.keyframe_cloud == rhs.keyframe_cloud &&
    lhs.keyframe_color == rhs.keyframe_color &&
    lhs.keyframe_poses == rhs.keyframe_poses &&
    lhs.keyframe_map == rhs.keyframe_map;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lio_sam::cloud_info_<ContainerAllocator1> & lhs, const ::lio_sam::cloud_info_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lio_sam

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lio_sam::cloud_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lio_sam::cloud_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lio_sam::cloud_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lio_sam::cloud_info_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lio_sam::cloud_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lio_sam::cloud_info_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lio_sam::cloud_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7490d670e17d4a2b9ad7d689d0925e1a";
  }

  static const char* value(const ::lio_sam::cloud_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7490d670e17d4a2bULL;
  static const uint64_t static_value2 = 0x9ad7d689d0925e1aULL;
};

template<class ContainerAllocator>
struct DataType< ::lio_sam::cloud_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lio_sam/cloud_info";
  }

  static const char* value(const ::lio_sam::cloud_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lio_sam::cloud_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Cloud Info\n"
"Header header\n"
"\n"
"int32[] start_ring_index\n"
"int32[] end_ring_index\n"
"\n"
"int32[] point_column_index  # point column index in range image\n"
"int32[] point_range  # point range \n"
"\n"
"int64 imu_available\n"
"int64 odom_available\n"
"\n"
"# Attitude for LOAM initialization\n"
"float32 imu_roll_init\n"
"float32 imu_pitch_init\n"
"float32 imu_yaw_init\n"
"\n"
"# Initial guess from imu pre-integration\n"
"float32 init_guess_x\n"
"float32 init_guess_y\n"
"float32 init_guess_z\n"
"float32 init_guess_roll\n"
"float32 init_guess_pitch\n"
"float32 init_guess_yaw\n"
"\n"
"# Point cloud messages\n"
"sensor_msgs/PointCloud2 cloud_deskewed \n"
"sensor_msgs/PointCloud2 cloud_corner\n"
"sensor_msgs/PointCloud2 cloud_surface\n"
"\n"
"# 3rd party messages\n"
"sensor_msgs/PointCloud2 keyframe_cloud\n"
"sensor_msgs/PointCloud2 keyframe_color\n"
"sensor_msgs/PointCloud2 keyframe_poses\n"
"sensor_msgs/PointCloud2 keyframe_map\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/PointCloud2\n"
"# This message holds a collection of N-dimensional points, which may\n"
"# contain additional information such as normals, intensity, etc. The\n"
"# point data is stored as a binary blob, its layout described by the\n"
"# contents of the \"fields\" array.\n"
"\n"
"# The point cloud data may be organized 2d (image-like) or 1d\n"
"# (unordered). Point clouds organized as 2d images may be produced by\n"
"# camera depth sensors such as stereo or time-of-flight.\n"
"\n"
"# Time of sensor data acquisition, and the coordinate frame ID (for 3d\n"
"# points).\n"
"Header header\n"
"\n"
"# 2D structure of the point cloud. If the cloud is unordered, height is\n"
"# 1 and width is the length of the point cloud.\n"
"uint32 height\n"
"uint32 width\n"
"\n"
"# Describes the channels and their layout in the binary data blob.\n"
"PointField[] fields\n"
"\n"
"bool    is_bigendian # Is this data bigendian?\n"
"uint32  point_step   # Length of a point in bytes\n"
"uint32  row_step     # Length of a row in bytes\n"
"uint8[] data         # Actual point data, size is (row_step*height)\n"
"\n"
"bool is_dense        # True if there are no invalid points\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/PointField\n"
"# This message holds the description of one point entry in the\n"
"# PointCloud2 message format.\n"
"uint8 INT8    = 1\n"
"uint8 UINT8   = 2\n"
"uint8 INT16   = 3\n"
"uint8 UINT16  = 4\n"
"uint8 INT32   = 5\n"
"uint8 UINT32  = 6\n"
"uint8 FLOAT32 = 7\n"
"uint8 FLOAT64 = 8\n"
"\n"
"string name      # Name of field\n"
"uint32 offset    # Offset from start of point struct\n"
"uint8  datatype  # Datatype enumeration, see above\n"
"uint32 count     # How many elements in the field\n"
;
  }

  static const char* value(const ::lio_sam::cloud_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lio_sam::cloud_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.start_ring_index);
      stream.next(m.end_ring_index);
      stream.next(m.point_column_index);
      stream.next(m.point_range);
      stream.next(m.imu_available);
      stream.next(m.odom_available);
      stream.next(m.imu_roll_init);
      stream.next(m.imu_pitch_init);
      stream.next(m.imu_yaw_init);
      stream.next(m.init_guess_x);
      stream.next(m.init_guess_y);
      stream.next(m.init_guess_z);
      stream.next(m.init_guess_roll);
      stream.next(m.init_guess_pitch);
      stream.next(m.init_guess_yaw);
      stream.next(m.cloud_deskewed);
      stream.next(m.cloud_corner);
      stream.next(m.cloud_surface);
      stream.next(m.keyframe_cloud);
      stream.next(m.keyframe_color);
      stream.next(m.keyframe_poses);
      stream.next(m.keyframe_map);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cloud_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lio_sam::cloud_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lio_sam::cloud_info_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "start_ring_index[]" << std::endl;
    for (size_t i = 0; i < v.start_ring_index.size(); ++i)
    {
      s << indent << "  start_ring_index[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.start_ring_index[i]);
    }
    s << indent << "end_ring_index[]" << std::endl;
    for (size_t i = 0; i < v.end_ring_index.size(); ++i)
    {
      s << indent << "  end_ring_index[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.end_ring_index[i]);
    }
    s << indent << "point_column_index[]" << std::endl;
    for (size_t i = 0; i < v.point_column_index.size(); ++i)
    {
      s << indent << "  point_column_index[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.point_column_index[i]);
    }
    s << indent << "point_range[]" << std::endl;
    for (size_t i = 0; i < v.point_range.size(); ++i)
    {
      s << indent << "  point_range[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.point_range[i]);
    }
    s << indent << "imu_available: ";
    Printer<int64_t>::stream(s, indent + "  ", v.imu_available);
    s << indent << "odom_available: ";
    Printer<int64_t>::stream(s, indent + "  ", v.odom_available);
    s << indent << "imu_roll_init: ";
    Printer<float>::stream(s, indent + "  ", v.imu_roll_init);
    s << indent << "imu_pitch_init: ";
    Printer<float>::stream(s, indent + "  ", v.imu_pitch_init);
    s << indent << "imu_yaw_init: ";
    Printer<float>::stream(s, indent + "  ", v.imu_yaw_init);
    s << indent << "init_guess_x: ";
    Printer<float>::stream(s, indent + "  ", v.init_guess_x);
    s << indent << "init_guess_y: ";
    Printer<float>::stream(s, indent + "  ", v.init_guess_y);
    s << indent << "init_guess_z: ";
    Printer<float>::stream(s, indent + "  ", v.init_guess_z);
    s << indent << "init_guess_roll: ";
    Printer<float>::stream(s, indent + "  ", v.init_guess_roll);
    s << indent << "init_guess_pitch: ";
    Printer<float>::stream(s, indent + "  ", v.init_guess_pitch);
    s << indent << "init_guess_yaw: ";
    Printer<float>::stream(s, indent + "  ", v.init_guess_yaw);
    s << indent << "cloud_deskewed: ";
    s << std::endl;
    Printer< ::sensor_msgs::PointCloud2_<ContainerAllocator> >::stream(s, indent + "  ", v.cloud_deskewed);
    s << indent << "cloud_corner: ";
    s << std::endl;
    Printer< ::sensor_msgs::PointCloud2_<ContainerAllocator> >::stream(s, indent + "  ", v.cloud_corner);
    s << indent << "cloud_surface: ";
    s << std::endl;
    Printer< ::sensor_msgs::PointCloud2_<ContainerAllocator> >::stream(s, indent + "  ", v.cloud_surface);
    s << indent << "keyframe_cloud: ";
    s << std::endl;
    Printer< ::sensor_msgs::PointCloud2_<ContainerAllocator> >::stream(s, indent + "  ", v.keyframe_cloud);
    s << indent << "keyframe_color: ";
    s << std::endl;
    Printer< ::sensor_msgs::PointCloud2_<ContainerAllocator> >::stream(s, indent + "  ", v.keyframe_color);
    s << indent << "keyframe_poses: ";
    s << std::endl;
    Printer< ::sensor_msgs::PointCloud2_<ContainerAllocator> >::stream(s, indent + "  ", v.keyframe_poses);
    s << indent << "keyframe_map: ";
    s << std::endl;
    Printer< ::sensor_msgs::PointCloud2_<ContainerAllocator> >::stream(s, indent + "  ", v.keyframe_map);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIO_SAM_MESSAGE_CLOUD_INFO_H
